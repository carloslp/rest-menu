// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/menu.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MenuService_GetFullMenu_FullMethodName          = "/menu.MenuService/GetFullMenu"
	MenuService_GetRestaurantInfo_FullMethodName    = "/menu.MenuService/GetRestaurantInfo"
	MenuService_UpdateRestaurantInfo_FullMethodName = "/menu.MenuService/UpdateRestaurantInfo"
	MenuService_CreateCategory_FullMethodName       = "/menu.MenuService/CreateCategory"
	MenuService_ListCategories_FullMethodName       = "/menu.MenuService/ListCategories"
	MenuService_UpdateCategory_FullMethodName       = "/menu.MenuService/UpdateCategory"
	MenuService_DeleteCategory_FullMethodName       = "/menu.MenuService/DeleteCategory"
	MenuService_CreateDish_FullMethodName           = "/menu.MenuService/CreateDish"
	MenuService_ListDishesByCategory_FullMethodName = "/menu.MenuService/ListDishesByCategory"
	MenuService_UpdateDish_FullMethodName           = "/menu.MenuService/UpdateDish"
	MenuService_DeleteDish_FullMethodName           = "/menu.MenuService/DeleteDish"
)

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuServiceClient interface {
	// Public-facing RPCs
	GetFullMenu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FullMenuResponse, error)
	// Admin RPCs
	GetRestaurantInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestaurantInfo, error)
	UpdateRestaurantInfo(ctx context.Context, in *RestaurantInfo, opts ...grpc.CallOption) (*RestaurantInfo, error)
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *CategoryID, opts ...grpc.CallOption) (*Empty, error)
	CreateDish(ctx context.Context, in *Dish, opts ...grpc.CallOption) (*Dish, error)
	ListDishesByCategory(ctx context.Context, in *CategoryID, opts ...grpc.CallOption) (*ListDishesResponse, error)
	UpdateDish(ctx context.Context, in *Dish, opts ...grpc.CallOption) (*Dish, error)
	DeleteDish(ctx context.Context, in *DishID, opts ...grpc.CallOption) (*Empty, error)
}

type menuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuServiceClient(cc grpc.ClientConnInterface) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) GetFullMenu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FullMenuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullMenuResponse)
	err := c.cc.Invoke(ctx, MenuService_GetFullMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) GetRestaurantInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestaurantInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantInfo)
	err := c.cc.Invoke(ctx, MenuService_GetRestaurantInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateRestaurantInfo(ctx context.Context, in *RestaurantInfo, opts ...grpc.CallOption) (*RestaurantInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantInfo)
	err := c.cc.Invoke(ctx, MenuService_UpdateRestaurantInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, MenuService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, MenuService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, MenuService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) DeleteCategory(ctx context.Context, in *CategoryID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) CreateDish(ctx context.Context, in *Dish, opts ...grpc.CallOption) (*Dish, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dish)
	err := c.cc.Invoke(ctx, MenuService_CreateDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) ListDishesByCategory(ctx context.Context, in *CategoryID, opts ...grpc.CallOption) (*ListDishesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDishesResponse)
	err := c.cc.Invoke(ctx, MenuService_ListDishesByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateDish(ctx context.Context, in *Dish, opts ...grpc.CallOption) (*Dish, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dish)
	err := c.cc.Invoke(ctx, MenuService_UpdateDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) DeleteDish(ctx context.Context, in *DishID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MenuService_DeleteDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
// All implementations must embed UnimplementedMenuServiceServer
// for forward compatibility.
type MenuServiceServer interface {
	// Public-facing RPCs
	GetFullMenu(context.Context, *Empty) (*FullMenuResponse, error)
	// Admin RPCs
	GetRestaurantInfo(context.Context, *Empty) (*RestaurantInfo, error)
	UpdateRestaurantInfo(context.Context, *RestaurantInfo) (*RestaurantInfo, error)
	CreateCategory(context.Context, *Category) (*Category, error)
	ListCategories(context.Context, *Empty) (*ListCategoriesResponse, error)
	UpdateCategory(context.Context, *Category) (*Category, error)
	DeleteCategory(context.Context, *CategoryID) (*Empty, error)
	CreateDish(context.Context, *Dish) (*Dish, error)
	ListDishesByCategory(context.Context, *CategoryID) (*ListDishesResponse, error)
	UpdateDish(context.Context, *Dish) (*Dish, error)
	DeleteDish(context.Context, *DishID) (*Empty, error)
	mustEmbedUnimplementedMenuServiceServer()
}

// UnimplementedMenuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMenuServiceServer struct{}

func (UnimplementedMenuServiceServer) GetFullMenu(context.Context, *Empty) (*FullMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullMenu not implemented")
}
func (UnimplementedMenuServiceServer) GetRestaurantInfo(context.Context, *Empty) (*RestaurantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantInfo not implemented")
}
func (UnimplementedMenuServiceServer) UpdateRestaurantInfo(context.Context, *RestaurantInfo) (*RestaurantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurantInfo not implemented")
}
func (UnimplementedMenuServiceServer) CreateCategory(context.Context, *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedMenuServiceServer) ListCategories(context.Context, *Empty) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedMenuServiceServer) UpdateCategory(context.Context, *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedMenuServiceServer) DeleteCategory(context.Context, *CategoryID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedMenuServiceServer) CreateDish(context.Context, *Dish) (*Dish, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDish not implemented")
}
func (UnimplementedMenuServiceServer) ListDishesByCategory(context.Context, *CategoryID) (*ListDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDishesByCategory not implemented")
}
func (UnimplementedMenuServiceServer) UpdateDish(context.Context, *Dish) (*Dish, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDish not implemented")
}
func (UnimplementedMenuServiceServer) DeleteDish(context.Context, *DishID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDish not implemented")
}
func (UnimplementedMenuServiceServer) mustEmbedUnimplementedMenuServiceServer() {}
func (UnimplementedMenuServiceServer) testEmbeddedByValue()                     {}

// UnsafeMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServiceServer will
// result in compilation errors.
type UnsafeMenuServiceServer interface {
	mustEmbedUnimplementedMenuServiceServer()
}

func RegisterMenuServiceServer(s grpc.ServiceRegistrar, srv MenuServiceServer) {
	// If the following call pancis, it indicates UnimplementedMenuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MenuService_ServiceDesc, srv)
}

func _MenuService_GetFullMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).GetFullMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_GetFullMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).GetFullMenu(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_GetRestaurantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).GetRestaurantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_GetRestaurantInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).GetRestaurantInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateRestaurantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateRestaurantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_UpdateRestaurantInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateRestaurantInfo(ctx, req.(*RestaurantInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).ListCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).DeleteCategory(ctx, req.(*CategoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_CreateDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).CreateDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_CreateDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).CreateDish(ctx, req.(*Dish))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_ListDishesByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).ListDishesByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_ListDishesByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).ListDishesByCategory(ctx, req.(*CategoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_UpdateDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateDish(ctx, req.(*Dish))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_DeleteDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).DeleteDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_DeleteDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).DeleteDish(ctx, req.(*DishID))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuService_ServiceDesc is the grpc.ServiceDesc for MenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFullMenu",
			Handler:    _MenuService_GetFullMenu_Handler,
		},
		{
			MethodName: "GetRestaurantInfo",
			Handler:    _MenuService_GetRestaurantInfo_Handler,
		},
		{
			MethodName: "UpdateRestaurantInfo",
			Handler:    _MenuService_UpdateRestaurantInfo_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _MenuService_CreateCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _MenuService_ListCategories_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _MenuService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _MenuService_DeleteCategory_Handler,
		},
		{
			MethodName: "CreateDish",
			Handler:    _MenuService_CreateDish_Handler,
		},
		{
			MethodName: "ListDishesByCategory",
			Handler:    _MenuService_ListDishesByCategory_Handler,
		},
		{
			MethodName: "UpdateDish",
			Handler:    _MenuService_UpdateDish_Handler,
		},
		{
			MethodName: "DeleteDish",
			Handler:    _MenuService_DeleteDish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/menu.proto",
}
