/**
 * @fileoverview gRPC-Web generated client stub for menu
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: menu.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as menu_pb from './menu_pb'; // proto import: "menu.proto"


export class MenuServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetFullMenu = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/GetFullMenu',
    grpcWeb.MethodType.UNARY,
    menu_pb.Empty,
    menu_pb.FullMenuResponse,
    (request: menu_pb.Empty) => {
      return request.serializeBinary();
    },
    menu_pb.FullMenuResponse.deserializeBinary
  );

  getFullMenu(
    request: menu_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.FullMenuResponse>;

  getFullMenu(
    request: menu_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.FullMenuResponse) => void): grpcWeb.ClientReadableStream<menu_pb.FullMenuResponse>;

  getFullMenu(
    request: menu_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.FullMenuResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/GetFullMenu',
        request,
        metadata || {},
        this.methodDescriptorGetFullMenu,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/GetFullMenu',
    request,
    metadata || {},
    this.methodDescriptorGetFullMenu);
  }

  methodDescriptorGetRestaurantInfo = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/GetRestaurantInfo',
    grpcWeb.MethodType.UNARY,
    menu_pb.Empty,
    menu_pb.RestaurantInfo,
    (request: menu_pb.Empty) => {
      return request.serializeBinary();
    },
    menu_pb.RestaurantInfo.deserializeBinary
  );

  getRestaurantInfo(
    request: menu_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.RestaurantInfo>;

  getRestaurantInfo(
    request: menu_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.RestaurantInfo) => void): grpcWeb.ClientReadableStream<menu_pb.RestaurantInfo>;

  getRestaurantInfo(
    request: menu_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.RestaurantInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/GetRestaurantInfo',
        request,
        metadata || {},
        this.methodDescriptorGetRestaurantInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/GetRestaurantInfo',
    request,
    metadata || {},
    this.methodDescriptorGetRestaurantInfo);
  }

  methodDescriptorUpdateRestaurantInfo = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/UpdateRestaurantInfo',
    grpcWeb.MethodType.UNARY,
    menu_pb.RestaurantInfo,
    menu_pb.RestaurantInfo,
    (request: menu_pb.RestaurantInfo) => {
      return request.serializeBinary();
    },
    menu_pb.RestaurantInfo.deserializeBinary
  );

  updateRestaurantInfo(
    request: menu_pb.RestaurantInfo,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.RestaurantInfo>;

  updateRestaurantInfo(
    request: menu_pb.RestaurantInfo,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.RestaurantInfo) => void): grpcWeb.ClientReadableStream<menu_pb.RestaurantInfo>;

  updateRestaurantInfo(
    request: menu_pb.RestaurantInfo,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.RestaurantInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/UpdateRestaurantInfo',
        request,
        metadata || {},
        this.methodDescriptorUpdateRestaurantInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/UpdateRestaurantInfo',
    request,
    metadata || {},
    this.methodDescriptorUpdateRestaurantInfo);
  }

  methodDescriptorCreateCategory = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/CreateCategory',
    grpcWeb.MethodType.UNARY,
    menu_pb.Category,
    menu_pb.Category,
    (request: menu_pb.Category) => {
      return request.serializeBinary();
    },
    menu_pb.Category.deserializeBinary
  );

  createCategory(
    request: menu_pb.Category,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.Category>;

  createCategory(
    request: menu_pb.Category,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.Category) => void): grpcWeb.ClientReadableStream<menu_pb.Category>;

  createCategory(
    request: menu_pb.Category,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.Category) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/CreateCategory',
        request,
        metadata || {},
        this.methodDescriptorCreateCategory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/CreateCategory',
    request,
    metadata || {},
    this.methodDescriptorCreateCategory);
  }

  methodDescriptorListCategories = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/ListCategories',
    grpcWeb.MethodType.UNARY,
    menu_pb.Empty,
    menu_pb.ListCategoriesResponse,
    (request: menu_pb.Empty) => {
      return request.serializeBinary();
    },
    menu_pb.ListCategoriesResponse.deserializeBinary
  );

  listCategories(
    request: menu_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.ListCategoriesResponse>;

  listCategories(
    request: menu_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.ListCategoriesResponse) => void): grpcWeb.ClientReadableStream<menu_pb.ListCategoriesResponse>;

  listCategories(
    request: menu_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.ListCategoriesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/ListCategories',
        request,
        metadata || {},
        this.methodDescriptorListCategories,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/ListCategories',
    request,
    metadata || {},
    this.methodDescriptorListCategories);
  }

  methodDescriptorUpdateCategory = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/UpdateCategory',
    grpcWeb.MethodType.UNARY,
    menu_pb.Category,
    menu_pb.Category,
    (request: menu_pb.Category) => {
      return request.serializeBinary();
    },
    menu_pb.Category.deserializeBinary
  );

  updateCategory(
    request: menu_pb.Category,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.Category>;

  updateCategory(
    request: menu_pb.Category,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.Category) => void): grpcWeb.ClientReadableStream<menu_pb.Category>;

  updateCategory(
    request: menu_pb.Category,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.Category) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/UpdateCategory',
        request,
        metadata || {},
        this.methodDescriptorUpdateCategory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/UpdateCategory',
    request,
    metadata || {},
    this.methodDescriptorUpdateCategory);
  }

  methodDescriptorDeleteCategory = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/DeleteCategory',
    grpcWeb.MethodType.UNARY,
    menu_pb.CategoryID,
    menu_pb.Empty,
    (request: menu_pb.CategoryID) => {
      return request.serializeBinary();
    },
    menu_pb.Empty.deserializeBinary
  );

  deleteCategory(
    request: menu_pb.CategoryID,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.Empty>;

  deleteCategory(
    request: menu_pb.CategoryID,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.Empty) => void): grpcWeb.ClientReadableStream<menu_pb.Empty>;

  deleteCategory(
    request: menu_pb.CategoryID,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/DeleteCategory',
        request,
        metadata || {},
        this.methodDescriptorDeleteCategory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/DeleteCategory',
    request,
    metadata || {},
    this.methodDescriptorDeleteCategory);
  }

  methodDescriptorCreateDish = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/CreateDish',
    grpcWeb.MethodType.UNARY,
    menu_pb.Dish,
    menu_pb.Dish,
    (request: menu_pb.Dish) => {
      return request.serializeBinary();
    },
    menu_pb.Dish.deserializeBinary
  );

  createDish(
    request: menu_pb.Dish,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.Dish>;

  createDish(
    request: menu_pb.Dish,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.Dish) => void): grpcWeb.ClientReadableStream<menu_pb.Dish>;

  createDish(
    request: menu_pb.Dish,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.Dish) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/CreateDish',
        request,
        metadata || {},
        this.methodDescriptorCreateDish,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/CreateDish',
    request,
    metadata || {},
    this.methodDescriptorCreateDish);
  }

  methodDescriptorListDishesByCategory = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/ListDishesByCategory',
    grpcWeb.MethodType.UNARY,
    menu_pb.CategoryID,
    menu_pb.ListDishesResponse,
    (request: menu_pb.CategoryID) => {
      return request.serializeBinary();
    },
    menu_pb.ListDishesResponse.deserializeBinary
  );

  listDishesByCategory(
    request: menu_pb.CategoryID,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.ListDishesResponse>;

  listDishesByCategory(
    request: menu_pb.CategoryID,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.ListDishesResponse) => void): grpcWeb.ClientReadableStream<menu_pb.ListDishesResponse>;

  listDishesByCategory(
    request: menu_pb.CategoryID,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.ListDishesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/ListDishesByCategory',
        request,
        metadata || {},
        this.methodDescriptorListDishesByCategory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/ListDishesByCategory',
    request,
    metadata || {},
    this.methodDescriptorListDishesByCategory);
  }

  methodDescriptorUpdateDish = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/UpdateDish',
    grpcWeb.MethodType.UNARY,
    menu_pb.Dish,
    menu_pb.Dish,
    (request: menu_pb.Dish) => {
      return request.serializeBinary();
    },
    menu_pb.Dish.deserializeBinary
  );

  updateDish(
    request: menu_pb.Dish,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.Dish>;

  updateDish(
    request: menu_pb.Dish,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.Dish) => void): grpcWeb.ClientReadableStream<menu_pb.Dish>;

  updateDish(
    request: menu_pb.Dish,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.Dish) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/UpdateDish',
        request,
        metadata || {},
        this.methodDescriptorUpdateDish,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/UpdateDish',
    request,
    metadata || {},
    this.methodDescriptorUpdateDish);
  }

  methodDescriptorDeleteDish = new grpcWeb.MethodDescriptor(
    '/menu.MenuService/DeleteDish',
    grpcWeb.MethodType.UNARY,
    menu_pb.DishID,
    menu_pb.Empty,
    (request: menu_pb.DishID) => {
      return request.serializeBinary();
    },
    menu_pb.Empty.deserializeBinary
  );

  deleteDish(
    request: menu_pb.DishID,
    metadata?: grpcWeb.Metadata | null): Promise<menu_pb.Empty>;

  deleteDish(
    request: menu_pb.DishID,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu_pb.Empty) => void): grpcWeb.ClientReadableStream<menu_pb.Empty>;

  deleteDish(
    request: menu_pb.DishID,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/menu.MenuService/DeleteDish',
        request,
        metadata || {},
        this.methodDescriptorDeleteDish,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/menu.MenuService/DeleteDish',
    request,
    metadata || {},
    this.methodDescriptorDeleteDish);
  }

}

